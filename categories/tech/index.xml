<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tech on 江小凡的博客</title>
    <link>https://jxiaof.com/categories/tech/</link>
    <description>Recent content in tech on 江小凡的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2018–2022, jiaoxiaofan and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Wed, 09 Feb 2022 12:01:21 +0800</lastBuildDate><atom:link href="https://jxiaof.com/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python Asyncio</title>
      <link>https://jxiaof.com/python-asyncio/</link>
      <pubDate>Mon, 31 May 2021 17:48:25 +0800</pubDate>
      
      <guid>https://jxiaof.com/python-asyncio/</guid>
      <description>协程描述 协程，又称微线程，英文名Coroutine，是运行在单线程中的“并发”，协程相比多线程的一大优势就是省去了多线程之间的切换开销. 协程</description>
    </item>
    
    <item>
      <title>python accelerate</title>
      <link>https://jxiaof.com/python-accelerate/</link>
      <pubDate>Tue, 02 Mar 2021 09:40:43 +0800</pubDate>
      
      <guid>https://jxiaof.com/python-accelerate/</guid>
      <description>python加速 我自己参与了这部分的工作,花了一两周时间去实践,如下: python 程序性能优化的套路一般有两种： jit， 即just in time compiler</description>
    </item>
    
    <item>
      <title>Leetcode</title>
      <link>https://jxiaof.com/leetcode/</link>
      <pubDate>Wed, 14 Oct 2020 14:08:09 +0800</pubDate>
      
      <guid>https://jxiaof.com/leetcode/</guid>
      <description>中心思想 由简单到复杂 (不先考虑边界问题) 由局部到整体 由粗糙到精细 由厚到薄 买卖股票简答: class Solution: def maxProfit(self, prices): &amp;#34;&amp;#34;&amp;#34; :type prices: List[int] :rtype: int &amp;#34;&amp;#34;&amp;#34; min_p, max_p = 999999, 0 for i in range(len(prices)): min_p = min(min_p, prices[i]) max_p =</description>
    </item>
    
    <item>
      <title>Flask主线程以及短链接实现</title>
      <link>https://jxiaof.com/flask01/</link>
      <pubDate>Mon, 21 Sep 2020 23:05:02 +0800</pubDate>
      
      <guid>https://jxiaof.com/flask01/</guid>
      <description>&lt;p&gt;问题是这样的：开始有一个功能因为处理流程比较复杂，中间需要对接其他平台，自然在整个访问的稳定性以及访问延迟难以保障，甚至还会出现http连接错误，已经导致服务变慢，其他服务也受到影响不能正常稳定提供服务。此外在高并发下，这个功能业务是需要保证在同一事务下执行。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python多任务处理</title>
      <link>https://jxiaof.com/%E5%85%B3%E4%BA%8Epython%E5%A4%9A%E4%BB%BB%E5%8A%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Thu, 10 Sep 2020 14:57:37 +0800</pubDate>
      
      <guid>https://jxiaof.com/%E5%85%B3%E4%BA%8Epython%E5%A4%9A%E4%BB%BB%E5%8A%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;多任务有多进程-多线程以及异步协程&#34;&gt;多任务有：多进程 多线程以及异步协程。&lt;/h2&gt;
&lt;p&gt;平时多任务我们会使用 mutilprocess 或者threading 模块 甚至 gvent加上monkey_patch补丁，实现多任务运行，带来任务的高效率执行。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Grpc</title>
      <link>https://jxiaof.com/grpc/</link>
      <pubDate>Wed, 09 Feb 2022 12:01:21 +0800</pubDate>
      
      <guid>https://jxiaof.com/grpc/</guid>
      <description>grpc占坑,主要还是最近没有写心得.</description>
    </item>
    
    <item>
      <title>Argo</title>
      <link>https://jxiaof.com/argo/</link>
      <pubDate>Mon, 11 Oct 2021 16:41:45 +0800</pubDate>
      
      <guid>https://jxiaof.com/argo/</guid>
      <description>[toc] Templates There are several types of templates, divided into two different categories. The first category defines work to be done. This includes: Container Container Set Data Resource Script The second category orchestrate the work: DAG Steps Suspend We&amp;rsquo;re going to take a deep-dive into the two most common: containers and DAG. Container Template A container templates is the most common type of template, lets look at a complete example:</description>
    </item>
    
    <item>
      <title>Vscode</title>
      <link>https://jxiaof.com/vscode/</link>
      <pubDate>Mon, 27 Sep 2021 14:18:05 +0800</pubDate>
      
      <guid>https://jxiaof.com/vscode/</guid>
      <description>前言 balabala 其余的先不写了,占坑 注意事项: ctrl + command + w</description>
    </item>
    
    <item>
      <title>Nvidia</title>
      <link>https://jxiaof.com/nvidia/</link>
      <pubDate>Wed, 08 Sep 2021 16:33:16 +0800</pubDate>
      
      <guid>https://jxiaof.com/nvidia/</guid>
      <description>info shell 获取显卡信息 cat /proc/driver/nvidia/gpus/{{opus}}/information 获取显卡uuid nvidia-smi -L 获取全部info nvidia-smi -q 设置nvidia export NVIDIA_VISIBLE_DEVICES=`nvidia-smi -L</description>
    </item>
    
    <item>
      <title>FastAPI</title>
      <link>https://jxiaof.com/fastapi/</link>
      <pubDate>Sun, 05 Sep 2021 10:05:04 +0800</pubDate>
      
      <guid>https://jxiaof.com/fastapi/</guid>
      <description>​ 我个人认为fastapi,是一个非常不错的web 框架,为python web开发带来了新的活力,全新的文档openAPI2.0 ,更出色的io</description>
    </item>
    
    <item>
      <title>K8s</title>
      <link>https://jxiaof.com/k8s/</link>
      <pubDate>Wed, 23 Jun 2021 16:12:09 +0800</pubDate>
      
      <guid>https://jxiaof.com/k8s/</guid>
      <description>minikube does not support the LoadBalancer option yet curl http://{{sevices}}.{{namespace}}:8080/healthz kubectl exec - 在容器内执行命令 kubectl exec nginx-app ps aux export |grep ENV 命令补全 BASH # 在 bash 中设置当前 shell 的自动补全，要先安装 bash-completion 包 $ source &amp;lt;(kubectl completion bash) # 在您的 bash shell 中永久的</description>
    </item>
    
    <item>
      <title>Pytorch</title>
      <link>https://jxiaof.com/pytorch/</link>
      <pubDate>Tue, 22 Jun 2021 17:24:13 +0800</pubDate>
      
      <guid>https://jxiaof.com/pytorch/</guid>
      <description># 常用命令 torch.cuda.is_available() torch.cuda.current_device() torch.cuda.device_count() torch.cuda.device_name() python -c &amp;#39;import torch; print(torch.cuda.is_available(), torch.cuda.current_device(), torch.cuda.device_count(), torch.cuda.device_name(0))&amp;#39; python -c &amp;#39;import torch; print(torch.rand(2,3).cuda())&amp;#39; # setting device on GPU if available, else CPU device = torch.device(&amp;#39;cuda&amp;#39; if torch.cuda.is_available() else &amp;#39;cpu&amp;#39;) print(&amp;#39;Using device:&amp;#39;, device) print() #Additional Info when using cuda if device.type == &amp;#39;cuda&amp;#39;: print(torch.cuda.get_device_name(0)) print(&amp;#39;Memory Usage:&amp;#39;) print(&amp;#39;Allocated:&amp;#39;, round(torch.cuda.memory_allocated(0)/1024**3,1), &amp;#39;GB&amp;#39;) print(&amp;#39;Cached: &amp;#39;, round(torch.cuda.memory_reserved(0)/1024**3,1), &amp;#39;GB&amp;#39;) import torch import torch.nn as nn dev = torch.device(&amp;#34;cuda&amp;#34;)</description>
    </item>
    
    <item>
      <title>Pytorch2Onnx2TensorRT</title>
      <link>https://jxiaof.com/pytorch2onnx2tensorrt/</link>
      <pubDate>Tue, 18 May 2021 10:49:05 +0800</pubDate>
      
      <guid>https://jxiaof.com/pytorch2onnx2tensorrt/</guid>
      <description>pytorch 转 onnx 再转 tensorRT ONNX stands for Open Neural Network Exchange. It is an open format built to represent machine learning models. 先将模型转成onnx格式 需要安装pytorch onnx, opencv 要转换结果模型，您只需要一个指令 torch</description>
    </item>
    
    <item>
      <title>Mysql Session</title>
      <link>https://jxiaof.com/mysql-session/</link>
      <pubDate>Sun, 25 Apr 2021 09:57:36 +0800</pubDate>
      
      <guid>https://jxiaof.com/mysql-session/</guid>
      <description>分库 分库讲白了就是比如现在你有一个数据库服务器，数据库中有两张表分别是用户表和订单表。如果要分库的话现在你需要买两台机子，搞两个数据库分别放</description>
    </item>
    
    <item>
      <title>Mysql Index</title>
      <link>https://jxiaof.com/mysql-index/</link>
      <pubDate>Sun, 25 Apr 2021 09:48:44 +0800</pubDate>
      
      <guid>https://jxiaof.com/mysql-index/</guid>
      <description>mysql索引 优势：可以快速检索，减少I/O次数，加快检索速度；根据索引分组和排序，可以加快分组和排序； 劣势：索引本身也是表，因此会占用存储</description>
    </item>
    
    <item>
      <title>TFserving</title>
      <link>https://jxiaof.com/tfserving/</link>
      <pubDate>Mon, 08 Mar 2021 12:02:47 +0800</pubDate>
      
      <guid>https://jxiaof.com/tfserving/</guid>
      <description>模型部署tfserving 使用tensorflow训练好一个模型，使用keras其他框架也可以，只需要将模型转换为pb文件即可，根据不同的转</description>
    </item>
    
    <item>
      <title>Go</title>
      <link>https://jxiaof.com/go/</link>
      <pubDate>Thu, 17 Dec 2020 15:55:08 +0800</pubDate>
      
      <guid>https://jxiaof.com/go/</guid>
      <description>go 这里暂时不介绍go语言,这里读一篇文章. 阮一峰的网络日志 » 首页 » 档案 上一篇：科技爱好者周刊（第 1 下一篇：科技爱好者周刊（第 1 分类： 译文集 程</description>
    </item>
    
    <item>
      <title>Prometheus</title>
      <link>https://jxiaof.com/prometheus/</link>
      <pubDate>Thu, 17 Dec 2020 11:23:00 +0800</pubDate>
      
      <guid>https://jxiaof.com/prometheus/</guid>
      <description>0. 概述 ​ 作为自动化监控指标,prometheus加上grafana已经是很好的一套组合.与此相似的还有ELKF架构.这两个都是不错的高完善度</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://jxiaof.com/git/</link>
      <pubDate>Mon, 14 Dec 2020 11:42:36 +0800</pubDate>
      
      <guid>https://jxiaof.com/git/</guid>
      <description>git 一些实用的做法 长期更新 git branch -r git branch --track [branch] [remote-branch] git branch --set-upstream [branch] [remote-branch] # 删除分支 # delete branch locally git branch -d localBranchName # delete branch remotely git push origin --delete remoteBranchName # 删除分支 git push origin :branch-name # 删除远程分支 $ git push origin --delete [branch-name] $</description>
    </item>
    
    <item>
      <title>运维平台</title>
      <link>https://jxiaof.com/%E8%BF%90%E7%BB%B4%E5%B9%B3%E5%8F%B0%E5%BB%BA%E8%AE%BE/</link>
      <pubDate>Mon, 23 Nov 2020 10:14:58 +0800</pubDate>
      
      <guid>https://jxiaof.com/%E8%BF%90%E7%BB%B4%E5%B9%B3%E5%8F%B0%E5%BB%BA%E8%AE%BE/</guid>
      <description>&lt;h1 id=&#34;关于运维平台&#34;&gt;关于运维平台&lt;/h1&gt;
&lt;p&gt;​      针对于公司层面来讲,运维平台应当服从企业管理、项目管理以及应用管理功能从大到小的建设.功能自下而上输入到整个企业,为企业发展提供保障.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在企业管理与发展层面,运维平台提供相应的软件功能服务.提供主动探测与发现功能以及全平台业务监控或者智能监控功能等系统运营功能服务.与此同时,为支撑公司业务发展,运维平台提供系统发布,系统变更,故障出题等支撑工具服务.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过运维平台提供的API网关对接项目管理提供一整套包含 容器运维、测试服务、集成服务、项目管控平台服务、前后端服务、调度服务、配置服务、作业服务、数据服务等一系列功能平台支持.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运维平台对于每个应用,同时提供主机、网络、存储等基础资源服务,并集成配置管理系统对资源统一分发,统一管理.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同时,数据平台针对整体的iaas层、pass层、saas层服务建设,保障企业、项目、应用管理持续平稳运行,提供运维平台数据计算与输出服务.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于存储的笔记</title>
      <link>https://jxiaof.com/%E5%85%B3%E4%BA%8E%E5%AD%98%E5%82%A8/</link>
      <pubDate>Fri, 20 Nov 2020 02:26:39 +0800</pubDate>
      
      <guid>https://jxiaof.com/%E5%85%B3%E4%BA%8E%E5%AD%98%E5%82%A8/</guid>
      <description>存储系统科普——硬件层介绍 简介 该篇blog只是存储系列文章中的第一篇，所有文章请参考： 博客所有文章 在工程架构领域里，存储是一个非常重要的方向</description>
    </item>
    
    <item>
      <title>Cloud Native</title>
      <link>https://jxiaof.com/cloud-native/</link>
      <pubDate>Mon, 16 Nov 2020 18:06:54 +0800</pubDate>
      
      <guid>https://jxiaof.com/cloud-native/</guid>
      <description>直接上对比图: 云原生发展四个趋势的介绍： 拥抱 Serverless – 极致弹性，无需运维； 服务网格 – 将服务治理能力与应用解耦，并下沉到基础设施层； 云原生应用管理标</description>
    </item>
    
    <item>
      <title>ClickHouse</title>
      <link>https://jxiaof.com/clickhouse/</link>
      <pubDate>Mon, 16 Nov 2020 17:44:29 +0800</pubDate>
      
      <guid>https://jxiaof.com/clickhouse/</guid>
      <description>ClickHouse是“战斗民族”俄罗斯搜索巨头Yandex公司开源的一个极具&amp;quot;战斗力&amp;quot;的实时数据分析数据库，是面向 OLAP 的</description>
    </item>
    
    <item>
      <title>Funny</title>
      <link>https://jxiaof.com/funny/</link>
      <pubDate>Mon, 16 Nov 2020 17:12:40 +0800</pubDate>
      
      <guid>https://jxiaof.com/funny/</guid>
      <description>&lt;h1 id=&#34;some-funny-code&#34;&gt;some funny code&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;记录有趣的代码&lt;/li&gt;
&lt;li&gt;记录灵性的想法&lt;/li&gt;
&lt;li&gt;记录王多鱼的投资项目(这个项目王多鱼必定投资,手动狗头!)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>devops数据平台设计</title>
      <link>https://jxiaof.com/%E8%BF%90%E7%BB%B4%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Thu, 12 Nov 2020 09:45:51 +0800</pubDate>
      
      <guid>https://jxiaof.com/%E8%BF%90%E7%BB%B4%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;h1 id=&#34;数据平台开发初衷&#34;&gt;数据平台开发初衷&lt;/h1&gt;
&lt;p&gt;数据平台就是对于数据的处理和应用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://jxiaof.com/docker/</link>
      <pubDate>Sun, 08 Nov 2020 12:14:08 +0800</pubDate>
      
      <guid>https://jxiaof.com/docker/</guid>
      <description>ps auxw|head -1;ps auxw|sort -rn -k3|head -3 cat /etc/issue # 防止时间不一致 ENV TZ=Asia/Shanghai RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime &amp;amp;&amp;amp; echo $TZ &amp;gt; /etc/timezone nginx 第一次运行 docker run -d --name nginx -p 80:80 nginx 新建挂载目录 mkdir -p /root/docker/nginx/{conf, logs, html, ssl, conf/conf.d} 拷贝文件信息 docker cp nginx:/etc/nginx/nginx.conf /root/docker/nginx/conf &amp;amp;&amp;amp; docker cp nginx:/etc/nginx/conf.d/default.conf</description>
    </item>
    
    <item>
      <title>ELK实践与应用</title>
      <link>https://jxiaof.com/elk/</link>
      <pubDate>Tue, 03 Nov 2020 17:13:21 +0800</pubDate>
      
      <guid>https://jxiaof.com/elk/</guid>
      <description>elasticsearch 索引与mysql索引的区别 elkf日志平台搭建 grafana github链接 Grafana 的仪表盘市场 参考资料: https://juejin.im/post/6844903991340597255 参考资料: https://juejin.im/post/6844904147557285895</description>
    </item>
    
    <item>
      <title>JavaScript更新日志</title>
      <link>https://jxiaof.com/js/</link>
      <pubDate>Thu, 29 Oct 2020 16:31:16 +0800</pubDate>
      
      <guid>https://jxiaof.com/js/</guid>
      <description>使用JavaScript控制行为 JavaScript基本语法 语句和注释 变量和数据类型 声明和赋值 简单数据类型和复杂数据类型 变量的命名规则 表达式</description>
    </item>
    
    <item>
      <title>Python类型注解</title>
      <link>https://jxiaof.com/python%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Fri, 23 Oct 2020 16:30:19 +0800</pubDate>
      
      <guid>https://jxiaof.com/python%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3/</guid>
      <description>typing &amp;mdash; 类型标注支持 函数接受并返回一个字符串，注释像下面这样: def greeting(name: str) -&amp;gt; str: return &amp;#39;Hello &amp;#39; + name 在函数 greeting 中，参数 name 预期是 str 类型，并且返回 str 类型。子类型允许作为</description>
    </item>
    
    <item>
      <title>Mongo</title>
      <link>https://jxiaof.com/mongo/</link>
      <pubDate>Thu, 15 Oct 2020 09:29:25 +0800</pubDate>
      
      <guid>https://jxiaof.com/mongo/</guid>
      <description>Document Database¶ High Performance Rich Query Language High Availability Support for Multiple Storage Engines Horizontal Scalability 相关链接: https://docs.mongodb.com/v3.6/reference/sql-comparison/ https://blog.csdn.net/luolian123456/article/details/83104242 / https://www.cnblogs.com/leskang/p/6000852.html INSERT db.collection(&amp;#39;inventory&amp;#39;).insertMany([ // MongoDB adds the _id field with an ObjectId if _id is not present { item: &amp;#34;journal&amp;#34;, qty: 25, status: &amp;#34;A&amp;#34;, size: { h: 14, w: 21, uom: &amp;#34;cm&amp;#34; }, tags: [ &amp;#34;blank&amp;#34;, &amp;#34;red&amp;#34; ]</description>
    </item>
    
    <item>
      <title>关于Redis的长期更新</title>
      <link>https://jxiaof.com/redis/</link>
      <pubDate>Wed, 14 Oct 2020 11:11:39 +0800</pubDate>
      
      <guid>https://jxiaof.com/redis/</guid>
      <description>redis数据类型分析 Redis的应用场景 高速缓存 - 将不常变化但又经常被访问的热点数据放到Redis数据库中，可以大大降低关系型数据库的压力</description>
    </item>
    
    <item>
      <title>进程间的通信</title>
      <link>https://jxiaof.com/%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Fri, 09 Oct 2020 15:55:40 +0800</pubDate>
      
      <guid>https://jxiaof.com/%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</guid>
      <description>进程间的通信方式 信号 管道 信号量 共享内存 消息队列 套接字 对比： 方式 传输的信息量 使用场景 关键词 信号 少量 任何 硬件来源、软件来源 / 信号队列 管道 大量 亲缘</description>
    </item>
    
    <item>
      <title>FUNCTOOLS的新功能</title>
      <link>https://jxiaof.com/function_tools/</link>
      <pubDate>Mon, 21 Sep 2020 22:36:03 +0800</pubDate>
      
      <guid>https://jxiaof.com/function_tools/</guid>
      <description>&lt;p&gt;&lt;strong&gt;functools - 可调用对象的高阶函数和操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;functools模块用于高阶函数：作用于或返回其他函数的函数。一般来说，对于这个模块，任何可调用对象都可以被视为函数。在实际开发中,经常用到,比如lru_cache以及partial.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VIM使用记录</title>
      <link>https://jxiaof.com/vim/</link>
      <pubDate>Mon, 21 Sep 2020 19:57:29 +0800</pubDate>
      
      <guid>https://jxiaof.com/vim/</guid>
      <description>&lt;h2 id=&#34;vim解决痛点使用记录&#34;&gt;vim解决痛点使用记录&lt;/h2&gt;
&lt;p&gt;vim 对于一般的需求,确实用不到.很多时候前端用不太到,后端不做数据处理用不太到,不做linux下的高频率开发用不到,并且使用起来没有那么直观,学习曲线前期相当陡峭,但是vim一直很优秀,一直就是编辑器的指向标,现在许多的编辑器特性,也是参考vim快捷键实现的.比如向上移动一行代码功能,vim使用 &lt;strong&gt;ddkp&lt;/strong&gt;同样可以实现,比如过滤删除等.许多时候简直有一种如鱼得水的开发快感.下面我会持续记录一些vim我自己实实在在解决痛点的用法.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Macos使用记录</title>
      <link>https://jxiaof.com/macos%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Fri, 18 Sep 2020 21:56:44 +0800</pubDate>
      
      <guid>https://jxiaof.com/macos%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;p&gt;macos 安装 M2Crypto&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install openssl 
brew install swig

env LDFLAGS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-L&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;brew --prefix openssl&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/lib&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;CFLAGS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-I&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;brew --prefix openssl&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/include&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;SWIG_FEATURES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-cpperraswarn -includeall -I&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;brew --prefix openssl&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/include&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;pip install m2crypto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>图像分析与处理</title>
      <link>https://jxiaof.com/%E5%9B%BE%E5%83%8F%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%84%E7%90%86/</link>
      <pubDate>Fri, 18 Sep 2020 17:48:09 +0800</pubDate>
      
      <guid>https://jxiaof.com/%E5%9B%BE%E5%83%8F%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%84%E7%90%86/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Python 图像处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    本篇文章主要对图像处理有基本认知,是项目开发中容易遇到的问题,并非处理ai人工智能识别与转换.(此外,目前市面上的图像识别以及语音识别已经发展的相当不错.大部分的ai都是根据github开源调试参数.)&lt;/p&gt;
&lt;p&gt;​       多数图像处理与操作技术可以被两个库有效完成，它们是 &lt;strong&gt;Python Imaging Library (PIL)&lt;/strong&gt; 与  &lt;strong&gt;OpenSource Computer Vision (OpenCV)&lt;/strong&gt; 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sql使用手记</title>
      <link>https://jxiaof.com/%E8%B0%88%E8%B0%88%E5%AE%9E%E9%99%85%E4%BD%BF%E7%94%A8sql%E5%BC%80%E5%8F%91/</link>
      <pubDate>Wed, 26 Aug 2020 02:26:39 +0800</pubDate>
      
      <guid>https://jxiaof.com/%E8%B0%88%E8%B0%88%E5%AE%9E%E9%99%85%E4%BD%BF%E7%94%A8sql%E5%BC%80%E5%8F%91/</guid>
      <description>&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;​    Sql同样是一门编程语言，在某种意义上来讲，大部分的程序员写的代码都可以通过sql实现，sql应当是后端程序员基本功。sql在排查数据，如同脚本一样简单直接高效，非常实用。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
