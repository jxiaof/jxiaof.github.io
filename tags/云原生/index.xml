<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>云原生 on 江小凡的博客</title>
    <link>https://jxiaof.com/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/</link>
    <description>Recent content in 云原生 on 江小凡的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Designed By Felix</copyright>
    <lastBuildDate>Mon, 16 Nov 2020 18:06:54 +0800</lastBuildDate><atom:link href="https://jxiaof.com/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cloud Native</title>
      <link>https://jxiaof.com/post/cloud-native/</link>
      <pubDate>Mon, 16 Nov 2020 18:06:54 +0800</pubDate>
      
      <guid>https://jxiaof.com/post/cloud-native/</guid>
      <description>直接上对比图:
云原生发展四个趋势的介绍：
 拥抱 Serverless – 极致弹性，无需运维； 服务网格 – 将服务治理能力与应用解耦，并下沉到基础设施层； 云原生应用管理标准化 – 构建高效、自动化和可信赖的应用交付体系； 计算无边界 – 实现云-边缘-IoT 设备的高效协同。  容器掀开了云原生技术的序幕：
  Docker 镜像形成了应用分发和交付的标准，可以将应用与底层运行环境实现解耦；
  Kubernetes 技术成为了分布式资源调度和编排的标准，Kubernetes 屏蔽了底层基础架构的差异，帮助应用运行在不同的基础设施之中；
  在此基础之上，社区开始建立上层的应用抽象。比如服务治理层，Istio 成为了服务通信的网络协议栈，将服务治理能力与应用层实现解耦。
  云平台的一些架构
 携程云原生演变
PAAS</description>
    </item>
    
  </channel>
</rss>
