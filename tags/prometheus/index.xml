<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>prometheus on 江小凡的博客</title>
    <link>https://jxiaof.com/tags/prometheus/</link>
    <description>Recent content in prometheus on 江小凡的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Designed By Felix</copyright>
    <lastBuildDate>Thu, 17 Dec 2020 11:23:00 +0800</lastBuildDate><atom:link href="https://jxiaof.com/tags/prometheus/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Prometheus</title>
      <link>https://jxiaof.com/post/prometheus/</link>
      <pubDate>Thu, 17 Dec 2020 11:23:00 +0800</pubDate>
      
      <guid>https://jxiaof.com/post/prometheus/</guid>
      <description>0. 概述 ​	作为自动化监控指标,prometheus加上grafana已经是很好的一套组合.与此相似的还有ELKF架构.这两个都是不错的高完善度项目,两者目的和使用方式有一些区别,这里说说prometheus.其中prometheus的exproter用于生产待导入数据,这是关键的一步.
​	promrthus原本就有很多exproter,但是任务往往还需要自定义.这里我就结合近期,说说自定义采集数据到prometheus,之后通过grafana输出.
1. Flask 快速使用 如果是使用 Flask 的话，Promehteus 的 Python SDK 默认支持，可以这么用：
创建main.py
from flask import Flask from werkzeug.middleware.dispatcher import DispatcherMiddleware from prometheus_client import make_wsgi_app # Create my app app = Flask(__name__) # Add prometheus wsgi middleware to route /metrics requests app_dispatch = DispatcherMiddleware(app, { &amp;#39;/metrics&amp;#39;: make_wsgi_app() }) pip install uwsgi uwsgi --http 0.0.0.0:8000 --wsgi-file myapp.py --callable app_dispatch 这样就可以直接通过 wsgi 直接使用了：
curl -I http://localhost:8000/metrics 2. 单 Metric 实现 如果想要自己实现，那么也可以简单得实现：</description>
    </item>
    
  </channel>
</rss>
