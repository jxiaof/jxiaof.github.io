<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on 江小凡的博客</title>
    <link>https://jxiaof.com/series/python/</link>
    <description>Recent content in python on 江小凡的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Designed By Felix</copyright>
    <lastBuildDate>Mon, 31 May 2021 17:48:25 +0800</lastBuildDate><atom:link href="https://jxiaof.com/series/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python Asyncio</title>
      <link>https://jxiaof.com/post/python-asyncio/</link>
      <pubDate>Mon, 31 May 2021 17:48:25 +0800</pubDate>
      
      <guid>https://jxiaof.com/post/python-asyncio/</guid>
      <description>协程描述 协程，又称微线程，英文名Coroutine，是运行在单线程中的“并发”，协程相比多线程的一大优势就是省去了多线程之间的切换开销. 协程</description>
    </item>
    
    <item>
      <title>Flask主线程以及短链接实现</title>
      <link>https://jxiaof.com/post/flask01/</link>
      <pubDate>Mon, 21 Sep 2020 23:05:02 +0800</pubDate>
      
      <guid>https://jxiaof.com/post/flask01/</guid>
      <description>&lt;p&gt;问题是这样的：开始有一个功能因为处理流程比较复杂，中间需要对接其他平台，自然在整个访问的稳定性以及访问延迟难以保障，甚至还会出现http连接错误，已经导致服务变慢，其他服务也受到影响不能正常稳定提供服务。此外在高并发下，这个功能业务是需要保证在同一事务下执行。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TFserving</title>
      <link>https://jxiaof.com/post/tfserving/</link>
      <pubDate>Mon, 08 Mar 2021 12:02:47 +0800</pubDate>
      
      <guid>https://jxiaof.com/post/tfserving/</guid>
      <description>模型部署tfserving 使用tensorflow训练好一个模型，使用keras其他框架也可以，只需要将模型转换为pb文件即可，根据不同的转</description>
    </item>
    
    <item>
      <title>FastAPI</title>
      <link>https://jxiaof.com/post/fastapi/</link>
      <pubDate>Fri, 05 Mar 2021 10:05:04 +0800</pubDate>
      
      <guid>https://jxiaof.com/post/fastapi/</guid>
      <description>文章的部分内容被密码保护： --- DON&#39;T MODIFY THIS LINE --- pass</description>
    </item>
    
    <item>
      <title>python accelerate</title>
      <link>https://jxiaof.com/post/python-accelerate/</link>
      <pubDate>Tue, 02 Mar 2021 09:40:43 +0800</pubDate>
      
      <guid>https://jxiaof.com/post/python-accelerate/</guid>
      <description>python加速 我自己参与了这部分的工作,花了一两周时间去实践,如下: python 程序性能优化的套路一般有两种： jit， 即just in time compiler</description>
    </item>
    
    <item>
      <title>Funny</title>
      <link>https://jxiaof.com/post/funny/</link>
      <pubDate>Mon, 16 Nov 2020 17:12:40 +0800</pubDate>
      
      <guid>https://jxiaof.com/post/funny/</guid>
      <description>some funny code 记录有趣的代码 记录灵性的想法 记录王多鱼的投资项目(这个项目王多鱼必定投资,手动狗头!) 一、 import cv2 from cv2 import VideoWriter, VideoWriter_fourcc, imread, resize import os from subprocess import call img_root = &amp;#39;/Users/jiangxiaofan/Downloads/image/&amp;#39; out_root = &amp;#39;/Users/jiangxiaofan/Downloads/image/PeppaPig.avi&amp;#39; fps</description>
    </item>
    
    <item>
      <title>Python类型注解</title>
      <link>https://jxiaof.com/post/python%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Fri, 23 Oct 2020 16:30:19 +0800</pubDate>
      
      <guid>https://jxiaof.com/post/python%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3/</guid>
      <description>typing &amp;mdash; 类型标注支持 函数接受并返回一个字符串，注释像下面这样: def greeting(name: str) -&amp;gt; str: return &amp;#39;Hello &amp;#39; + name 在函数 greeting 中，参数 name 预期是 str 类型，并且返回 str 类型。子类型允许作为</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jxiaof.com/post/leetcode/</link>
      <pubDate>Wed, 14 Oct 2020 14:08:09 +0800</pubDate>
      
      <guid>https://jxiaof.com/post/leetcode/</guid>
      <description>中心思想 由简单到复杂 (不先考虑边界问题) 由局部到整体 由粗糙到精细 由厚到薄 买卖股票简答: class Solution: def maxProfit(self, prices): &amp;#34;&amp;#34;&amp;#34; :type prices: List[int] :rtype: int &amp;#34;&amp;#34;&amp;#34; min_p, max_p = 999999, 0 for i in range(len(prices)): min_p = min(min_p, prices[i]) max_p =</description>
    </item>
    
    <item>
      <title>FUNCTOOLS的新功能</title>
      <link>https://jxiaof.com/post/function_tools/</link>
      <pubDate>Mon, 21 Sep 2020 22:36:03 +0800</pubDate>
      
      <guid>https://jxiaof.com/post/function_tools/</guid>
      <description>&lt;p&gt;&lt;strong&gt;functools - 可调用对象的高阶函数和操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;functools模块用于高阶函数：作用于或返回其他函数的函数。一般来说，对于这个模块，任何可调用对象都可以被视为函数。在实际开发中,经常用到,比如lru_cache以及partial.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>图像分析与处理</title>
      <link>https://jxiaof.com/post/%E5%9B%BE%E5%83%8F%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%84%E7%90%86/</link>
      <pubDate>Fri, 18 Sep 2020 17:48:09 +0800</pubDate>
      
      <guid>https://jxiaof.com/post/%E5%9B%BE%E5%83%8F%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%84%E7%90%86/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Python 图像处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写在前面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    本篇文章主要对图像处理有基本认知,是项目开发中容易遇到的问题,并非处理ai人工智能识别与转换.(此外,目前市面上的图像识别以及语音识别已经发展的相当不错.大部分的ai都是根据github开源调试参数.)&lt;/p&gt;
&lt;p&gt;​       多数图像处理与操作技术可以被两个库有效完成，它们是 &lt;strong&gt;Python Imaging Library (PIL)&lt;/strong&gt; 与  &lt;strong&gt;OpenSource Computer Vision (OpenCV)&lt;/strong&gt; 。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
